#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sohhaofeng1989/ndi-gt-hash-signing/2.1.1
  - url: 'https://api.sandbox.ndi.gov.sg/api/v1/hss' #sandbox API link
    description: NDI API Sandbox
info:
  version: "2.1.1"
  title: National Digital Identity (NDI) - Hash Signing API
  termsOfService: 'https://www.ndi-api.gov.sg/termsofuse/'
  contact:
    email: ndi_support@ndi.gov.sg
  x-logo:
    url: './logo_ndi.png'
  description: |-
    This is the API store where you can discover everything about integrating
    with the National Digital Identity (NDI) platform's hash signing service.

    Kindly do note that NDI's Hash-Signing Service conforms strictly to OpenID Connect 1.0 Client-Intitated Backchannel Authentication (CIBA) extension.   

    # Release Notes
      * 0.0.3 (1-Oct-2018)
        * Initial release of API
      * 2.0.0 (22-May-2019)
        * CIBA revamp of HSS APIs
      * 2.0.1 (3-Jul-2019)
        * Revised CIBA flow of HSS APIs before Security Review
    # Overview
      The Hash Signing(HSS) APIs are meant for developers of web-based signature applications (Web App accessed by users through the desktop or mobile browsers) to interface with the NDI Hash Signing Service(HSS), so that citizens can use their SingPass Mobile App to sign documents that can be archived and verified for long-term non-repudiation purposes.
      
    # Functional Flow (QR)
      There is a 2-part process for Digital Signing Partners (DSPs) or Relying Parties (RPs) to integrate with NDI's HSS. The diagram below illustrates a high-level overview of the functional flow.
          
    ### First Leg

      <img src="./first-leg.png"></img>
      
      1. The first leg begins with the RP/DSP initiating a GET call to the Signing Authentication Endpoint. This results in a signing reference object that is meant to be encoded as a QR image and displayed on the front-end of the DSP/RP's application.
      
      2. The end-user shall use his/her SingPass Mobile App to scan the QR. This will result in the capturing of the QR Content. Implicitly, the user also provides consent to allow the release of his/her public certificate to the RP/DSP.
      
      3. The end user's form-factor invokes HSS's internal endpoint that results in the user's public certificate passed to HSS via a prolonged network connection.

      4. The user certificate shall be sent to the RP/DSP via its registered Client Notification Endpoint. The signature-refence ID and several other CIBA parameters will be passed alongside the user certificate via this endpoint as well. Thus, concluding the first leg.
      
    ### Second Leg

      <img src="./second-leg.png"></img>
      
      1. The second leg begins with the RP/DSP initiating a POST call to HSS's sign-hash endpoint. The RP/DSP shall make use of this endpoint to pass the PKCS#7 document hash (PAdES-LTV), challenge code and signing-reference ID to HSS. A valid request shall return a HTTP Status code of 201.
      
      2. The HSS displays the 6-digit challenge code and document hash on the user's form factor. The end-user is then requested to sign on the displayed document hash, this is commonly referred to as a signing-request or signing-challenge".
      
      3. The local signature, eligible for non-repudiation of origin (end-user's signature over the document-hash) would be generated by the end-user's form-factor. From the end-user's point of view, he or she would be required to perform a form-factor biometric/pin authentication to generate the required signature. This resultant signature shall be sent to the RP/DSP via the Client Notification Endpoint. Thus, concluding the second leg.

      # Technical Flow (QR)

      <img src="./hss-qr-flow-technical-flow.png"></img>
      
      # Functional Flow (PN)
      
      Similar to the QR flow, the HSS signing flow for Push Notification utilizes a 2-part approach. DSP/RPs subscribing to the PN flow should first perform a OIDC-handshake with NDI's ASP prior to the first-leg as a one-off authentication to solicit the end-user's id_token. The 2-part approach is as follow.
        
    ### First Leg
        
      <img src="./first-leg-pn.png"></img>

      1. The RP/DSP redirects the end-user to perform a one-time OIDC Handshake with NDI's ASP. After the user successfully authenticates him or herself, his or her id_token will be issued to the RP/DSP.

      2. The RP/DSP performs a POST call to the PN trigger endpoint, passing in the user's id_token under the id_token_hint field. The HSS shall return a signing-reference ID or "sign_ref" upon successful invocation.

      3. A PN is sent to the user's mobile device.

      4. The user consents on releasing his/her public certificate to the DSP/RP.

      5. His/her public cerificate will be sent to HSS via an internal endpoint.

      6. The user certificate shall be sent to the RP/DSP via its registered Client Notification Endpoint. The signing ref ID and several other CIBA parameters will be passed alongside the user certificate via this endpoint as well. Thus, concluding the first leg.

    ### Second Leg

      <img src="./second-leg-pn.png"></img>

      1. The second leg begins with the RP/DSP initiating a POST call to HSS's sign-hash endpoint. The RP/DSP shall make use of this endpoint to pass the PKCS#7 document hash (PAdES-LTV), challenge code and signing-reference ID to HSS. A valid request shall return a HTTP Status code of 201.
      
      2. The HSS displays the 6-digit challenge code and document hash on the user's form factor.The end-user is then requested to sign on the displayed document hash, this is commonly referred to as a signing-request or signing-challenge"
      
      3. The local signature, eligible for non-repudiation of origin (end-user's signature over the document-hash) would be generated by the end-user's form-factor. From the end-user's point of view, he or she would be required to perform a form-factor biometric/pin authentication to generate the required signature. This resultant signature shall be sent to the RP/DSP via the Client Notification Endpoint. Thus, concluding the second leg.

      # Technical Flow (PN)

      <img src="./hss-pn-flow-technical-flow.png"></img>
      
      # JWT Specifications
      
      ## DSP/RP Client Notification Token (Client Notification Endpoint)

      As per OpenID Connect's [CIBA Push flow](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#rfc.section.9), all requests to the client notification endpoint is authorized via a client notification token that was first issued by the DSP/RP at the Signing Authentication Endpoint. The required structure of the client notification token is as follow:

      <div class="table-responsive-sm">
        <table class="table table-striped table-bordered mb-0">
        <thead>
        <tr>
        <th>PARAMETER</th>
        <th>DESCRIPTION</th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td>header</td>
        <td>
          <div>algo : "ES256"</div>
          <div>kid :  "The key ID that can be used to reference the corresponding public key from a jwks endpoint"</div>
        </td>
        </tr>
        <tr>
        <td>payload</td>
        <td>
        <div>
            nonce : "A uniquely generated nonce to ensure that the token can never be replayed"
        </div>
        <div>
            exp : "expiry duration in seconds"
        </div>
        <div>
            iat : "unix timestamp in seconds to specify exact point of time this token was issued"
        </div>
        </td>
        </tr>
        <tr>
        <td>signature</td>
        <td>
            ECDSA-sha256 ( header + "." + payload, privateKey)
        </td>
        </tr>
        </thread>
        </table>
        </div>

    ## Internal Tokens Between HSS and SingPass Mobile
        
    <b>Signing Challenge</b>
        
    The signingChallenge is presented as a JWS object. This JWS encapsulates the information required to present the user with a signing challenge. It is presented to the SingPass Mobile as a response to the POST Signing Challenge endpoint

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>PARAMETER</th>
    <th>DESCRIPTION</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>header</td>
    <td>
    <div>algo : "ES256"</div>
    <div>kid :  "The key ID that can be used to reference the corresponding public key from the asp's jwks endpoint"</div>
    </td>
    </tr>
    <tr>
    <td>payload</td>
    <td>
    <div>
        sign_ref : "Signing Reference ID. This has to be the same value as the sign_ref in the request path."
    </div>
    <div>
        client_name : "Name of DSP/RP to be displayed to the end-user."
    </div>
    <div>
        doc_hash : "The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string"
    </div>
    <div>
        doc_name : "The subjected document name to be displayed to the end-user."
    </div>
    <div>
        challenge_code : "6-digit challenge code to be physically verified by end-user"
    </div>
    <div>
        exp : "expiry duration in seconds. i.e 3 seconds"
    </div>
    <div>
        iat : "unix timestamp in seconds to specify exact point of time this token was issued"
    </div>
    <div>
        hss_nonce : "A uniquely generated server-side nonce from the HSS. This value has to be passed back to the HSS as a claim within the signedChallengeResponse."
    </div>
    <div>
        nonce : "An echo-ed back nonce that was passed to the HSS as a request to the GET Signing Challenge endpoint (GET)."
    </div>
    </td>
    </tr>
    <tr>
    <td>signature</td>
    <td>
      ECDSA-sha256 ( header + "." + payload, privateKey)
    </td>
    </tr>
    </thread>
    </table>
    </div>

    <b>Challenge Response</b>
        
    The challengeResponse is presented as a JWS object. This JWS encapsulates the necessary information required for the HSS to notify DSP/RPs that the user has responded to the signing challenge. i.e. user has signed on the subjected PKCS#7 document hash (PAdES-LTV). The SingPass Mobile sends this JWS to the HSS as a request input to the POST challenge response endpoint

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>PARAMETER</th>
    <th>DESCRIPTION</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>header</td>
    <td>
    <div>algo : "ES256"</div>
    <div>x5c :  "The End User's Singpass Mobile App public certificate"</div>
    </td>
    </tr>
    <tr>
    <td>payload</td>
    <td>
    <div>
        sign_ref : "Signing Reference ID. This has to be the same value as the sign_ref in the request path."
    </div>
    <div>
        ff_id : "The form-factor identifier that corresponds to the end-user's registered mobile device. This is a value that is allocated to each device upon form-factor provisioning"
    </div>
    <div>
        doc_hash : "The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string"
    </div>
    <div>
        challenge_code : "6-digit challenge code to be physically verified by end-user"
    </div>
    <div>
        usr_signature : "End user's signature over the subjected PKCS#7 document hash (PAdES-LTV)"
    </div>
    <div>
        exp : "expiry duration in seconds. i.e 3 seconds"
    </div>
    <div>
        iat : "unix timestamp in seconds to specify exact point of time this token was issued"
    </div>
    <div>
        hss_nonce : "A uniquely generated server-side nonce from the HSS's Signing Challenge endpoint."
    </div>
    <div>
        timestamp : "unix timestamp in milliseconds to specify the exact point of time the user signed on the document hash"
    </div>
    </td>
    </tr>
    <tr>
    <td>signature</td>
    <td>
      ECDSA-sha256 ( header + "." + payload, mobileAppPrivateKey)
    </td>
    </tr>
    </thread>
    </table>
    </div>


    <br>
    
    ## Server-to-server Non-repudiation Between HSS and DSP

    <b>JWS for Client Notification Endpoint (Request)</b>
    
    Verifiable by DSP/RP - The signedClientNotification is a JWS object that mainly serves the purpose of non-repudiation between HSS and DSP servers. This JWS encapsulates the client notification endpoint's properties as custom claims on top of the registered JWT claims as presented in [RFC 7519](https://tools.ietf.org/html/rfc7519)

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>PARAMETER</th>
    <th>DESCRIPTION</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>header</td>
    <td>
    <div>algo : "ES256"</div>
    <div>kid :  "The key ID that can be used to reference the corresponding public key from the hss's jwks endpoint"</div>
    </td>
    </tr>
    <tr>
    <td>payload</td>
    <td>
    
    <div>
        iss : "The principal that issued the JWT. Denoted by the domain name of the issuer. For example 'sandbox.api.ndi.gov.sg'"
    </div>
    
    <div>
        aud : "The receipent that the JWT is intended for. Denoted by the domain name of the audience. For example 'example-sign.example.com'"
    </div>
    <div>
        notification_content : "A JSON object representing the contents sent via the client notification endpoint"
    </div>
    <div>
        exp : "expiry duration in seconds. i.e 3 seconds"
    </div>
    <div>
        iat : "unix timestamp in seconds to specify exact point of time this token was issued"
    </div>
    </td>
    </tr>
    <tr>
    <td>signature</td>
    <td>
      ECDSA-sha256 ( header + "." + payload, privateKey)
    </td>
    </tr>
    </thread>
    </table>
    </div>

    <b>JWS for Client Notification Endpoint (Response)</b>
        
    Generated by DSP/RP - The signedClientNotificationResponse is a JWS object that mainly serves the purpose of non-repudiation between HSS and DSP servers. This JWS encapsulates the client notification endpoint response's properties as custom claims on top of the registered JWT claims as presented in [RFC 7519](https://tools.ietf.org/html/rfc7519)

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>PARAMETER</th>
    <th>DESCRIPTION</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>header</td>
    <td>
    <div>algo : "ES256"</div>
    <div>kid :  "The key ID that can be used to reference the corresponding public key from the DSP/RP's jwks endpoint"</div>
    </td>
    </tr>
    <tr>
    <td>payload</td>
    <td>
    
    <div>
        iss : "The principal that issued the JWT. Denoted by the domain name of the issuer. For example 'sandbox.api.ndi.gov.sg'"
    </div>
    
    <div>
        aud : "The receipent that the JWT is intended for. Denoted by the domain name of the audience. For example 'example-sign.example.com'"
    </div>
    <div>
        notification_response : "A JSON object representing the response from the client notification endpoint"
    </div>
    <div>
        exp : "expiry duration in seconds. i.e 3 seconds"
    </div>
    <div>
        iat : "unix timestamp in seconds to specify exact point of time this token was issued"
    </div>
    </td>
    </tr>
    <tr>
    <td>signature</td>
    <td>
      ECDSA-sha256 ( header + "." + payload, privateKey)
    </td>
    </tr>
    </thread>
    </table>
    </div>

    # Exception Handling

    DSP/RPs who are looking at integrating with NDI's HSS must note the following alternate flows and handle it in an appropriate, user-friendly manner:

    ### QR Flow

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>Scenario Description</th>
    <th>NDI HSS notifies DSPs</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>The end-user scans the QR Code using his/ her SingPass Mobile but decides to cancel the document signing request before the signing session has expired.</td>
    <td>
    NDI's HSS shall send an error and error description to the DSP/RPs Client Notification Endpoint as "invalid_request" and "user_cancelled" respectively.
    </td>
    </tr>
    <tr>
    <td>The end-user scans the QR Code using his/ her SingPass Mobile but decides to click sign/cancel on the document signing request **after** the signing session has expired.</td>
    <td>
    There will no notification.</br> 
    Instead both NDI's HSS and DSP should evict the signing session and its contents (i.e sign_ref, user cert, client notification token etc).
    </td>
    </tr>
    <tr>
    <td>The end-user scans the QR Code using his/ her SingPass Mobile App, decides to sign on the document signing request but fails to authenticate him/herself through the form-factor.</td>
    <td>
    NDI's HSS shall send an error and error description to the DSP/RPs Client Notification Endpoint as "invalid_request" and "auth_failed" respectively.
    </td>
    </tr>
    </thread>
    </table>
    </div>

    ### PN Flow

    <div class="table-responsive-sm">
    <table class="table table-striped table-bordered mb-0">
    <thead>
    <tr>
    <th>Scenario Description</th>
    <th>NDI HSS notifies DSPs</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td>The end-user clicks on the Push Notification but decides to cancel the document signing request before the signing session has expired.</td>
    <td>
    NDI's HSS shall send an error and error description to the DSP/RPs Client Notification Endpoint as "invalid_request" and "user_cancelled" respectively.
    </td>
    </tr>
    <tr>
    <td>The end-user clicks on the Push Notification but decides to cancel the document signing request **after** the signing session has expired.</td>
    <td>
    There will not be a notification for such a use-case. 
    Instead both NDI's HSS and DSP should evict the signing session and its contents (i.e sign_ref, user cert, client notification token etc).
    </td>
    </tr>
    <tr>
    <td>The end-user clicks on the Push Notification, decides to sign on the document signing request but fails to authenticate him/herself through the form-factor.</td>
    <td>
    NDI's HSS shall send an error and error description to the DSP/RPs Client Notification Endpoint as "invalid_request" and "auth_failed" respectively.
    </td>
    </tr>

    <tr>
    <td>The end-user cancels the Push Notification upfront.</td>
    <td>
    NDI's HSS shall send an error and error description to the DSP/RPs Client Notification Endpoint as "invalid_request" and "user_cancelled" respectively.
    </td>
    </tr>

    <tr>
    <td>The end-user ignores the Push Notification.</td>
    <td>
    There will not be a notification for such a use-case. 
    Instead both NDI's HSS and DSP should evict the signing session and its contents (i.e sign_ref).
    </td>
    </tr>

    </thread>
    </table>
    </div>

    # Service Level Agreements

    DSP/RPs who are looking at integrating with NDI's HSS must observe the following service-level agreements:
     * The maximum interval between the end of the first leg to the start of the second leg is 3 seconds.
     * During this interval, an end-user will encounter a loading/ spinner screen that indicates that he or she has to wait for the signing request.
     * Rule of Thumb: A signing-reference ID (signing session) has a short time-to-live (TTL) of 2 + 2 minutes. 
        * A signing reference object (signing session) that has been encoded to a QR Code will expire after 2 minutes.
        * Once the user scans the QR Code with his/her SingPass Mobile, the same signing reference object (signing session) will have an extended time-to-live of 2 minutes.
     * All Server to Server communciation between the DSP and HSS must be authenticated via Mutual Transport Layer Security (mTLS).
     * Although it is technically possible for DSP/RPs to cache an end-user's public certificate beyond the TTL of a signing-session, NDI does not condone such a practice.
     * Any attempts to cache the end-users signing certificate beyond the TTL of a signing-session shall be deemed as an infringement of this service-level agreement
     * The sign-hash endpoint (2nd Leg) for both PN and QR will reject any upfront request for a signing-reference object so as to deter the above scenario from occuring.

#These are the tags for the side bar (the one on the left)
tags:

  - name: Hash Signing Service
    description: >-
      These end points are called to perform hash signing where a signed user hash 
      could be returned and used to generate a digitally signed document hash.

#x-Tag groups are used to further group the tags
x-tagGroups:

  - name: HSS First Leg
    tags:
      - PN Trigger Endpoint
      - Signing Authentication Endpoint
      - Internal Endpoints for interaction between SingPass Mobile and HSS
      - Client Notification Endpoint

  - name: HSS Second Leg
    tags:
      - Hash Signing Endpoint

#=============================== API start ===========================



paths:

  '/signatures/push-notification/consent':
    post:
      tags:
       - PN Trigger Endpoint
      summary: Triggering a PN for User Consent to Release Public Certificate
      description: |
        HSS PN Trigger Endpoint. The client shall invoke this endpoint to retrieve a signing reference ID that shall be kept as reference for the span of the signing session. This endpoint is the start of the Client-Intitated Backchannel Authetication (CIBA) [Push Mode flow](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#rfc.section.5).
      operationId: createPushNotificationForUserCertConsent
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            $ref: "#/components/schemas/basicHttpAuthorization"
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pnNotificationConsentRequest'
              
      responses:
        '201':
          description: "A Signing Reference ID Object containing information for the RP to keep as reference for the digital-signing session"
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/signingReferenceIdentifier"
        '400':
          description: "Forbidden"
          content:
            application/json:    
              schema:
                allOf:
                  - $ref: "#/components/schemas/oidcError"
                  - $ref: "#/components/schemas/oidcErrorDescription"

  '/signatures/sign-ref':
    get:
      tags:
       - Signing Authentication Endpoint
      summary: Getting a Signing reference ID Object that should be QR-encoded
      description: |
        HSS Signing Authentication Endpoint. The DSP/RP shall invoke this endpoint to retrieve a signing reference ID that shall be QR-encoded and displayed as an image. This authentication endpoint is the start of the Client-Intitated Backchannel Authetication (CIBA) [Push Mode flow](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#rfc.section.5). Upon the user scanning the QR, the SingPass mobile App shall send the user's X.509 public certificate to HSS. Consequently, the HSS will notify the DSP/RP with the subjected certificate. Thus, the DSP/RP may then optionally proceed with the creation of a PKCS#7 document hash (PAdES-LTV).
      operationId: getSigningReference
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string

        - name: nonce
          in: query
          required: true
          description: A client-side nonce generated which cannot be predicted, to ensure the challenge is always unique and not subjected to replay attacks. This is to be generated using methods compliant with NIST SP 800-90A Rev 1, specifically with SHA-256. This value shall be echo-ed back to the DSP/RP via the client notification endpoint.
          schema:
            type: string

        - name: client_notification_token
          in: query
          required: true
          schema:
            type: string

        - name: login_hint
          in: query
          required: false
          schema:
              type: string

        - name: response_type
          in: query
          required: true
          schema:
            type: string

      responses:
        '200':
          description: "A Signing Reference ID Object containing information for the RP to encode and display as a QR"
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/signingReferenceIdentifier"
        '400':
          description: "Forbidden"
          content:
            application/json:    
              schema:
                allOf:
                  - $ref: "#/components/schemas/oidcError"
                  - $ref: "#/components/schemas/oidcErrorDescription"

  '/signatures/{sign-ref}/challenge': 
    post:
      tags:
       - Internal Endpoints for interaction between SingPass Mobile and HSS
      summary: Send Signing Challenge Event (Internal)
      description: >- 
        This is an endpiont exposed internally by the HSS (Note: Only meant to be invoked by the SingPass Mobile/Form-Factor).
        The SingPass mobile App (Form-factor) shall utilize this method to send the end-user's public certificate to the HSS as well. This relies on a prolong HTTP connection and the response shall be a document hash and challenge code generated by the RP/DSP.
      operationId: createSigningChallengeEvent
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signingChallengeRequest'
      parameters:
        - name: sign-ref
          in: path
          required: true
          schema:
            type: string

      responses:
        '201':
          description: "An object containing the PKCS#7 document hash (PAdES-LTV) and 6-digit challenge code from the RP/DSP"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signingChallengeResponse'

        '400':
          description: "Forbidden"
  
  '/signatures/{sign-ref}/response': 
    post:
      tags:
       - Internal Endpoints for interaction between SingPass Mobile and HSS
      summary: Send Challenge Response Event (Internal)
      description: >- 
        This is an endpiont exposed internally by the HSS (Note: Only meant to be invoked by the SingPass Mobile/Form-Factor).
        The SingPass mobile App (Form-factor) shall utilize this method to send the end-user's signature over the document hash.
      operationId: createChallengeResponseEvent
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
             oneOf:
                  - $ref: "#/components/schemas/challengeResponse"
                  - $ref: "#/components/schemas/challengeResponseWithError"
      parameters:
        - name: sign-ref
          in: path
          required: true
          schema:
            type: string

      responses:
        '200':
          description: "Digital Signing Session updated with User's Signature and/or Response"
          
        '400':
          description: "Forbidden"
  '/ndi/callback':
    get:
      tags:
          - Client Notification Endpoint
      summary: Client Notification Endpoint (web-hook)
      description: >-  
        This is the registered Client Notification Endpoint that RPs or Digital Signing Platforms (DSP) would expose as a webhook/callback. This webhook/callback will be a means for the RP/DSP to receive the respective end user's public certificate in a usr_cert query parameter or the user's signature over the document hash in a signature query parameter. According to OpenID Connect's CIBA Specifications, this endpoint must enforce TLS on NDI's HSS and requests to this endpoint must be authenticated using a bearer token (Authorization Header) created by the Client. This bearer token must be the same "client_notification_token" that was passed to NDI's HSS in the QR Authentication Endpoint phase.
        
      operationId: clientNotificationEndpoint
      
      parameters:
      
        - name: error
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/oidcError"
            
        - name: error_description
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/oidcErrorDescription"
            
        - name: usr_cert
          in: query
          required: false
          schema:
            type: string
        
        - name: signature
          in: query
          required: false
          schema:
            type: string
            
        - name: doc_hash
          in: query
          required: false
          schema:
            type: string

        - name: sign_ref
          in: query
          required: true
          schema:
            type: string
            
        - name: nonce
          in: query
          required: true
          schema:
            type: string
      
        - name: Authorization
          in: header
          required: true
          schema:
            $ref: "#/components/schemas/bearerToken"
            
      responses:
        '200':
          description: Success. The Document Signing Session has resulted in the end-user's public certificate/signature sent to the DSP/RP.
        '400':
          description: "Error"

  '/signatures/sign-hash':
    post:
      tags:
          - Hash Signing Endpoint
      summary: Allows the RP/DSP to request the end-user to sign on a PKCS#7 document hash (PaDES-LTA).
      description: >-  
        This is the endpoint called by the RP/DSP to trigger a signing-request on the user's mobile form-factor to challenge him/her  to sign on the subjected PKCS#7 document hash (PaDES-LTA). This endpoint is applicable to both QR and PN flow.
        
      operationId: hashSigningService
      parameters:
              - name: Authorization
                in: header
                required: true
                schema:
                  $ref: "#/components/schemas/basicHttpAuthorization"
            
      requestBody:
        content:
            application/json:
                schema:
                  oneOf:
                  - $ref: "#/components/schemas/signingChallengeDetailsForQR"
                  - $ref: "#/components/schemas/signingChallengeDetailsForPN"

      responses:
        '201':
          description : "End-User Presented with Signing Challenge"
          content:
            application/json:
                schema:
                  oneOf:
                  - $ref: "#/components/schemas/signingChallengeDisplayedMessage"
        '400':
          description: "Error"

components:
  schemas:
    
    clientNotificationResponse:
      type: object
      properties:
        msg: 
          type: string
          description: Fixed at "Notified. The Signing Session has resulted in the end-user's public certificate/signature sent to the DSP/RP."
      required:
      - msg
    
    signingChallengeDisplayedMessage:
      type: object
      properties:
        msg: 
          type: string
          description: Fixed at 'End-User Presented with Signing Challenge'
        signed_response:
          $ref: "#/components/schemas/signedClientNotificationResponse"
      required:
      - msg
      - signed_response
  
    signedClientNotification       :
      type: string
      description: A base64-encoded JWS string that encapsulates the client notification endpoint's properties as custom claims
    
    signedClientNotificationResponse:
      type: string
      description: A base64-encoded JWS string that encapsulates the client notification endpoint's response as custom claims
    
    clientNotificationError  :
      type: object
      properties:
        error:
          $ref : "#/components/schemas/oidcError"
        error_description:
          $ref : "#/components/schemas/oidcErrorDescription"
        sign_ref:
          type: string
        nonce:
          type: string
        signed_notification:
            $ref: '#/components/schemas/signedClientNotification'
      required:
      - sign_ref
      - nonce
      - error
      - signed_notification
      
    clientNotificationFirstLeg  :
        type: object
        properties:
          usr_cert:
            type: string
          sign_ref:
            type: string
          nonce:
            type: string
          signed_notification:
            $ref: '#/components/schemas/signedClientNotification'
        required:
        - sign_ref
        - nonce
        - usr_cert
        - signed_notification
      
    clientNotificationSecondLeg  :
      type: object
      properties:
        usr_signature:
          type: string
        sign_ref:
          type: string
        nonce:
          type: string
        signed_notification:
            $ref: '#/components/schemas/signedClientNotification'
          
      required:
      - sign_ref
      - nonce
      - usr_signature
      - signed_notification
      
      
    pnNotificationConsentRequest : 
     type: object
     
     properties:
        nonce:
          type: string
          description: A client-side nonce generated which cannot be predicted, to ensure the challenge is always unique and not subjected to replay attacks. This is to be generated using methods compliant with NIST SP 800-90A Rev 1, specifically with SHA-256. This value shall be echo-ed back to the DSP/RP via the client notification endpoint.
        client_notification_token:
          type: string
          description: It is a bearer token provided by the Client that will be used by the OpenID Provider to authenticate the notificqtion request to the Client. The length of the token MUST NOT exceed 1024 characters and it MUST conform to the syntax for Bearer credentials as defined in Section 2.1 of [RFC6750]. Clients MUST ensure that it contains sufficient entropy (a minimum of 128 bits while 160 bits is recommended) to make brute force guessing or forgery of a valid token computationally infeasible - the means of achieving this are implementation specific, with possible approaches including secure pseudorandom number generation or cryptographically secured self-contained tokens
        id_token_hint:
          type: string
          description: The id_token of the authenticated NDI user. This id_token can be retrieved by performing an OIDC handshake with NDI's ASP
        response_type:
          type: string
          description: urn:openid:params:grant-type:ciba
     required:
      - nonce
      - client_notification_token
      - id_token_hint
      - response_type
      
    basicHttpAuthorization : 
      type: string
      description: A base64 encoded string concatenated client_id, ':' and client_secret
    bearerToken : 
      type: string
      description: The DSP/RP's Client Notification Token as a Bearer Token
    
    signingReferenceIdentifier : 
     type: object
     properties:
        expires_in:
          type: number
          description: unix timestamp in seconds that indicates when the Signing
            Session expires
        sign_ref:
          type: string
          description: A unique identifier in the format of a UUIDv4. This identifies the Signing Session and should be kept as a session by the RP/DSP.
        nonce:
          type: string
     required:
      - expires_in
      - sign_ref
      - nonce
      
    oidcError : 
      type: object
      properties:
        error:
          type: string
          description: An Error Enumeration to notify clients the corresponding Error Flow/s
          minLength: 3
          maxLength: 255
      required:
      - error
      enum:
      - invalid_request
      - invalid_client
      - invalid_grant
      - unauthorized_client
      - unsupported_grant_type
      - invalid_scope
      
    oidcErrorDescription : 
      type: object
      properties:
        error_description:
          description:  A description that details the Error Enumeration.
          type: string
          minLength: 3
          maxLength: 255
      required:
      - error_description
      enum:
      - user_cancelled
      - auth_failed
      
    signingChallengeRequest :
      type: object
      properties:
        nonce:
          type: string
          description: A client-side nonce generated which cannot be predicted, to ensure the challenge is always unique and not subjected to replay attacks. This is to be generated using methods compliant with NIST SP 800-90A Rev 1, specifically with SHA-256
        x5c:
          type: string
          description: The End User's public certificate (For Document Signing)
      required:
      - x5c
      - nonce
      
    signingChallengeResponse :
      type: object
      properties:
        client_name:
          type: string
          description: The name of the RP/DSP
          minLength: 5
          maxLength: 255
        doc_name:
          type: string
          description: The name of the document that the user is signing on
          minLength: 5
          maxLength: 255
        doc_hash:
          type: string
          description: The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string
          minLength: 32
          maxLength: 255
        challenge_code:
          type: string
          description: 6 Digit challenge code meant for display on the user's form factor for physical verification
        signing_challenge:
          type: string
          description: A JWS encapsulating the above mentioned fields in its payload
      required:
      - client_name
      - doc_name
      - doc_hash
      - challenge_code
      - signed_challenge
      
    signingChallengeDetailsForQR :
      type: object
      properties:
        doc_name:
          type: string
          description: The name of the document that the user is signing on
        doc_hash:
          type: string
          description: The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string
        challenge_code:
          type: number
          description: 6 Digit challenge code meant for display on the user's form factor for verification
        sign_ref:
          type: string
          description: A unique identifier in the format of a UUIDv4. This identifies the Document Signing Session.
        nonce:
          type: string
          description: A client-side nonce generated which cannot be predicted, to ensure the challenge is always unique and not subjected to replay attacks. This is to be generated using methods compliant with NIST SP 800-90A Rev 1, specifically with SHA-256. This value shall be echo-ed back to the DSP/RP via the client notification endpoint.
      required:
      - doc_name
      - doc_hash
      - challenge_code
      - sign_ref
      - nonce
      
    signingChallengeDetailsForPN :
      type: object
      properties:
        doc_name:
          type: string
          description: The name of the document that the user is signing on
        doc_hash:
          type: string
          description: The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string
        challenge_code:
          type: number
          description: 6 Digit challenge code meant for display on the user's form factor for verification.
        sign_ref:
          type: string
          description: A unique identifier in the format of a UUIDv4. This identifies the Document Signing Session. This is only applicable if the first-leg of the PN has been executed previously.
        nonce:
          type: string
          description: A client-side nonce generated which cannot be predicted, to ensure the challenge is always unique and not subjected to replay attacks. This is to be generated using methods compliant with NIST SP 800-90A Rev 1, specifically with SHA-256. This value shall be echo-ed back to the DSP/RP via the client notification endpoint.
      
      required:
      - sign_ref
      - doc_name
      - doc_hash
      - challenge_code
      - nonce
      
    challengeResponseWithError :
      type: object
      properties:
        error:
          $ref : "#/components/schemas/oidcError"
        error_description:
          $ref : "#/components/schemas/oidcErrorDescription"
        timestamp:
          type: number
          description: The exact unix timestamp when the user has consented to sign over the document hash.
        ff_id:
            type: string
            description: The form-factor identifier that corresponds to the end-user's registered mobile device. This is a value that is allocated to each device upon form-factor provisioning.
        hss_nonce:
            type: string
            description: A uniquely generated server-side nonce from the HSS's Signing Challenge Endpoint. This value has to be passed back to the HSS as a claim within the signedChallengeResponse JWS Object.
            
      required:
      - error
      - error_description
      - timestamp
      - ff_id
      - hss_nonce
    
    challengeResponse :
      type: object
      properties:
        usr_signature:
          type: string
          description: The user's signature
          minLength: 5
          maxLength: 1024
        timestamp:
          type: number
          description: The exact unix timestamp when the user has consented to sign over the document hash.
        ff_id:
          type: string
          description: The form-factor identifier that corresponds to the end-user's registered mobile device. This is a value that is allocated to each device upon form-factor provisioning.
        doc_hash:
          type: string
          description: The PKCS#7 document hash (PadEs-LTA) formed by the RP/DSP. This value should be in its corresponding Hexadecimal representation, encoded as a UTF-8 string
        challenge_code:
          type: string
          description: 6-digit challenge code to be physically verified by end-user
        hss_nonce:
          type: string
          description: A uniquely generated server-side nonce from the HSS's Signing Challenge Endpoint. This value has to be passed back to the HSS as a claim within the signedChallengeResponse JWS Object.
          
      required:
      - usr_signature
      - timestamp
      - hss_nonce
      - challenge_code
      - doc_hash
      - ff_id
      
externalDocs:
  description: Find out more about NDI here.
  url: 'https://www.ndi-api.gov.sg'
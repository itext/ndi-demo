# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~
#remove qr

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
GET     /heartbeat                com.itextpdf.demo.ndi.controllers.HomeController.beat()
GET     /                com.itextpdf.demo.ndi.controllers.HomeController.index()

#links
GET /links/:alias   com.itextpdf.demo.ndi.controllers.HomeController.links(alias: String)


#pages
##login page
GET    /login                    com.itextpdf.demo.ndi.controllers.HomeController.appLogin(userId: String?="")

GET    /logoff                    com.itextpdf.demo.ndi.controllers.HomeController.appLogoff()

#file upload form page
GET    /upload                   com.itextpdf.demo.ndi.controllers.HomeController.personalPage()
GET    /files/tmpl               com.itextpdf.demo.ndi.controllers.FileController.uploadTestDocument()
#download document
GET    /files/:id/download       com.itextpdf.demo.ndi.controllers.FileController.download(id: String)

#action route for an upload form
POST   /files/upload             com.itextpdf.demo.ndi.controllers.FileController.upload()


GET    /files/:id/sign           com.itextpdf.demo.ndi.controllers.FileController.signPage(id: String)




#signing initialisation. Returns a signRef.
POST    /ndi/sign                      com.itextpdf.demo.ndi.controllers.SignController.signInit(fileRef: String, type: String)

#challenge code by signRef
POST    /ndi/sign/:signRef/challenge   com.itextpdf.demo.ndi.controllers.SignController.challengeCode(signRef: String)

# id of the output document.
POST    /ndi/sign/:signRef/result    com.itextpdf.demo.ndi.controllers.SignController.result(signRef: String)

#service route serving NDI Api callbacks
GET    /api/ndi/callback             com.itextpdf.demo.ndi.controllers.SignController.signCallback()












